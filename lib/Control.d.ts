import L, { Control } from 'leaflet';
import LeafletOptions from './interfaces/LeafletOptions';
import { StyleEditor } from './StyleEditor';
export declare class StyleEditorControl extends Control {
    private util;
    styleEditor: StyleEditor;
    options: LeafletOptions;
    constructor(options?: LeafletOptions);
    private controlDiv;
    private controlUI;
    private cancelUI;
    private styleEditorDiv;
    private styleEditorHeader;
    private styleEditorInterior;
    private tooltip;
    private tooltipWrapper;
    private layerGroups;
    private editLayers;
    private styleForm;
    onAdd(map: L.Map): HTMLElement;
    fireEvent(eventName: string, element?: any): void;
    createUi(): HTMLElement;
    addDomEvents(): void;
    addEventListeners(): void;
    addLeafletDrawEvents(): void;
    addLeafletEditableEvents(): void;
    onLayerCreated(layer: any): void;
    onLayerAdd(e: any): void;
    onRemove(): void;
    removeEventListeners(): void;
    removeDomEvents(): void;
    addButtons(): void;
    toggle(): void;
    enable(layer?: any): void;
    isEnabled(): boolean;
    disable(): void;
    addEditClickEvents(layer: any): void;
    removeEditClickEvents(layer: any): void;
    addIndicators(): void;
    removeIndicators(): void;
    hideEditor(): void;
    hideCancelButton(): void;
    showEditor(): void;
    showCancelButton(): void;
    initChangeStyle(e: any): void;
    showGeometryForm(layer: any): void;
    showMarkerForm(layer: any): void;
    createTooltip(): void;
    getMatchingElement(e: any): any;
    removeTooltip(): void;
    _layerIsIgnored(layer: any): boolean;
}
